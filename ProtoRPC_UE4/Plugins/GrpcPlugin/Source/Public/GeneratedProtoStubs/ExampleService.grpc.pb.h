// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: ExampleService.proto
// Original file comments:
// Copyright 2015 Paddle Creek Games Inc. All Rights Reserved.
//
// RPC & message definitions for a simple example service
// which authenticates a user and returns information about
// his/her character.
//
#ifndef GRPC_ExampleService_2eproto__INCLUDED
#define GRPC_ExampleService_2eproto__INCLUDED

#include "ExampleService.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace com {
namespace paddlecreekgames {

// Definition of the service which services authentication requests from clients.
class AuthService final {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Authenticate the client.
    virtual ::grpc::Status Authenticate(::grpc::ClientContext* context, const ::com::paddlecreekgames::AuthRequest& request, ::com::paddlecreekgames::AuthResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::paddlecreekgames::AuthResponse>> AsyncAuthenticate(::grpc::ClientContext* context, const ::com::paddlecreekgames::AuthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::paddlecreekgames::AuthResponse>>(AsyncAuthenticateRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::com::paddlecreekgames::AuthResponse>* AsyncAuthenticateRaw(::grpc::ClientContext* context, const ::com::paddlecreekgames::AuthRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Authenticate(::grpc::ClientContext* context, const ::com::paddlecreekgames::AuthRequest& request, ::com::paddlecreekgames::AuthResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::paddlecreekgames::AuthResponse>> AsyncAuthenticate(::grpc::ClientContext* context, const ::com::paddlecreekgames::AuthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::paddlecreekgames::AuthResponse>>(AsyncAuthenticateRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::com::paddlecreekgames::AuthResponse>* AsyncAuthenticateRaw(::grpc::ClientContext* context, const ::com::paddlecreekgames::AuthRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_Authenticate_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Authenticate the client.
    virtual ::grpc::Status Authenticate(::grpc::ServerContext* context, const ::com::paddlecreekgames::AuthRequest* request, ::com::paddlecreekgames::AuthResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Authenticate() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authenticate(::grpc::ServerContext* context, const ::com::paddlecreekgames::AuthRequest* request, ::com::paddlecreekgames::AuthResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuthenticate(::grpc::ServerContext* context, ::com::paddlecreekgames::AuthRequest* request, ::grpc::ServerAsyncResponseWriter< ::com::paddlecreekgames::AuthResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Authenticate<Service > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Authenticate() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authenticate(::grpc::ServerContext* context, const ::com::paddlecreekgames::AuthRequest* request, ::com::paddlecreekgames::AuthResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Authenticate() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::com::paddlecreekgames::AuthRequest, ::com::paddlecreekgames::AuthResponse>(std::bind(&WithStreamedUnaryMethod_Authenticate<BaseClass>::StreamedAuthenticate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Authenticate(::grpc::ServerContext* context, const ::com::paddlecreekgames::AuthRequest* request, ::com::paddlecreekgames::AuthResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    //virtual ::grpc::Status StreamedAuthenticate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::com::paddlecreekgames::AuthRequest,::com::paddlecreekgames::AuthResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Authenticate<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Authenticate<Service > StreamedService;
};

}  // namespace paddlecreekgames
}  // namespace com

#endif  // GRPC_ExampleService_2eproto__INCLUDED
