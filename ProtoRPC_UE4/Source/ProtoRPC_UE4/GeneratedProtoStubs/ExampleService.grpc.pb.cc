// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: ExampleService.proto

#include "ExampleService.pb.h"
#include "ExampleService.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace com {
namespace paddlecreekgames {

static const char* AuthService_method_names[] = {
  "/com.paddlecreekgames.AuthService/Authenticate",
};

std::unique_ptr< AuthService::Stub> AuthService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< AuthService::Stub> stub(new AuthService::Stub(channel));
  return stub;
}

AuthService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Authenticate_(AuthService_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AuthService::Stub::Authenticate(::grpc::ClientContext* context, const ::com::paddlecreekgames::AuthRequest& request, ::com::paddlecreekgames::AuthResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Authenticate_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::com::paddlecreekgames::AuthResponse>* AuthService::Stub::AsyncAuthenticateRaw(::grpc::ClientContext* context, const ::com::paddlecreekgames::AuthRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::com::paddlecreekgames::AuthResponse>(channel_.get(), cq, rpcmethod_Authenticate_, context, request);
}

AuthService::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      AuthService_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< AuthService::Service, ::com::paddlecreekgames::AuthRequest, ::com::paddlecreekgames::AuthResponse>(
          std::mem_fn(&AuthService::Service::Authenticate), this)));
}

AuthService::Service::~Service() {
}

::grpc::Status AuthService::Service::Authenticate(::grpc::ServerContext* context, const ::com::paddlecreekgames::AuthRequest* request, ::com::paddlecreekgames::AuthResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace com
}  // namespace paddlecreekgames

